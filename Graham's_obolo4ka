def rotate(A, B, C):
  return (B[0]-A[0])*(C[1]-B[1])-(B[1]-A[1])*(C[0]-B[0])


def grahamscan(A):
  n = len(A)
  P = []
  for i in range(0, n):
      P.append(i)
  for i in range(0, n):
    if A[P[i]][0] < A[P[0]][0]:
      P[i], P[0] = P[0], P[i]
  for i in range(2, n):
    j = i
    while j > 1 and (rotate(A[P[0]], A[P[j-1]], A[P[j]]) < 0):
      P[j], P[j-1] = P[j-1], P[j]
      j -= 1
  S = [P[0],P[1]]
  for i in range(2,n):
    while rotate(A[S[-2]], A[S[-1]], A[P[i]]) < 0:
      del S[-1]
    S.append(P[i])
  return S

pt = int(input())
arr = []

for i in range(pt):
    b = input()
    b = b.split(" ")

    temp = [int(b[0]),int(b[1])]
    arr.append(temp)

s = grahamscan(arr)
res = 0
for i in range(1, len(s)):
    res += ((arr[s[i - 1]][1] - arr[s[i]][1])**2 + (arr[s[i - 1]][0] - arr[s[i]][0])**2)**0.5
res += ((arr[s[len(s) - 1]][0] - arr[0][0])**2 + (arr[s[len(s) - 1]][1] - arr[0][1])**2)**0.5
print(res)


